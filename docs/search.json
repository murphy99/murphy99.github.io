[
  {
    "objectID": "walkthrough.html",
    "href": "walkthrough.html",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Markdown is an easy to read and write text format:\n\nIt’s plain text so works well with version control\nIt can be rendered into HTML, PDF, and more\nLearn more at: https://quarto.org/docs/authoring/"
  },
  {
    "objectID": "walkthrough.html#markdown",
    "href": "walkthrough.html#markdown",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Markdown is an easy to read and write text format:\n\nIt’s plain text so works well with version control\nIt can be rendered into HTML, PDF, and more\nLearn more at: https://quarto.org/docs/authoring/"
  },
  {
    "objectID": "walkthrough.html#code-cell",
    "href": "walkthrough.html#code-cell",
    "title": "Hello, Quarto",
    "section": "Code Cell",
    "text": "Code Cell\nHere is a Python code cell:\n\nimport os\nos.cpu_count()\n\n8"
  },
  {
    "objectID": "walkthrough.html#equation",
    "href": "walkthrough.html#equation",
    "title": "Hello, Quarto",
    "section": "Equation",
    "text": "Equation\nUse LaTeX to write equations:\n\\[\n\\chi' = \\sum_{i=1}^n k_i s_i^2\n\\]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Eileen P. Murphy",
    "section": "",
    "text": "This blog centers on the exploration of data discovery and practical data science for implementing the use of machine learning, dashboards, LLMs, LLM Apps by using existing open source tools such as but not limited to R, Python, DuckDB, SQLite, MongoDB, Hadoop, and Spark.\nGoData.ca mission is to explore and replicate already available research and implement actual use cases for implementation.\nEileen Murphy is the owner and contributor to GoData.ca blog."
  },
  {
    "objectID": "about.html#about-the-blog",
    "href": "about.html#about-the-blog",
    "title": "Eileen P. Murphy",
    "section": "",
    "text": "This blog centers on the exploration of data discovery and practical data science for implementing the use of machine learning, dashboards, LLMs, LLM Apps by using existing open source tools such as but not limited to R, Python, DuckDB, SQLite, MongoDB, Hadoop, and Spark.\nGoData.ca mission is to explore and replicate already available research and implement actual use cases for implementation.\nEileen Murphy is the owner and contributor to GoData.ca blog."
  },
  {
    "objectID": "posts/LLM_Demo/index.html",
    "href": "posts/LLM_Demo/index.html",
    "title": "Easily Build Customized LLMs",
    "section": "",
    "text": "Introduction\nCustomized LLMs can be created to enable you to have full control of your own propiertary PDFs or text files stored locally with just a few lines of code. Journalists who are always on deadliine, can respond quickly to new regulations or court hearing decisions speeding up the time to digest the new material and be the first to respond without risk of exposing their material to the world.\nDeployed on Hugging Face the Private LLM contains documents of publicly available Fables from around the world. With a simple interface, you can query about Aesop or Grimms Fairy tales. Query fables that exists in other parts of the world. Of course this is a demo and the documents are public, but if you clone the LLM demo, then run it locally - you will have your own localized LLM. This LLM is ideal if you want to combine copyrighted material that the larger LLMs may not have been trained on. You may have clients that are risk adverse about having any propietary documents even on a secured server. It’s also great as a demo if you would like to show what LLMs can do, and most importantly what their limitations are.\nSo, lets get started:\nSetting up reticulate\n\nlibrary(reticulate, quietly = T)\n#suppressPackageStartupMessages(library(\"reticulate\"))\noptions(reticulate.repl.quiet = TRUE)\n#use_virtualenv(\"r-reticulate\")\n#use_python(\"/usr/local/bin/python3\")\n\nGoing to try using pyenv go_llm\n\n#library(reticulate)\nreticulate::py_config()\n\npython:         /Users/Eileen/.virtualenvs/godata/bin/python\nlibpython:      /Users/Eileen/.pyenv/versions/3.12.6/lib/libpython3.12.dylib\npythonhome:     /Users/Eileen/.virtualenvs/godata:/Users/Eileen/.virtualenvs/godata\nvirtualenv:     /Users/Eileen/.virtualenvs/godata/bin/activate_this.py\nversion:        3.12.6 (main, Sep 26 2024, 09:29:53) [Clang 15.0.0 (clang-1500.3.9.4)]\nnumpy:          /Users/Eileen/.virtualenvs/godata/lib/python3.12/site-packages/numpy\nnumpy_version:  2.2.2\n\nNOTE: Python version was forced by VIRTUAL_ENV\n\n\nPython packages required\n\n\n# Install core components\n#pip3 install llama-index-core \n#pip3 install python-dotenv \n#pip3 install duckdb \n#pip3 install gradio\n\n# Install integrations\n#pip3 install llama-index-llms-openai\n#pip3 install llama-index-embeddings-openai\n#pip3 install llama_index.vector_stores.duckdb\n\n\n\n# Install integrations\n#pip install llama-index-llms-openai\n#pip install llama-index-embeddings-openai\n#pip install dotenv\n\nimport duckdb\nfrom dotenv import load_dotenv\nimport os\nimport openai\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.embeddings.openai import OpenAIEmbedding\nfrom llama_index.core import VectorStoreIndex, SimpleDirectoryReader\nimport textwrap\nimport gradio as gr\n\nThis LLM creates a vector store, that we need to make sure is deleted from any previous runs.\n\nfile_path = 'persist/my_vector_store.duckdb'\n\n# Check if file exists\nif os.path.exists(file_path):\n  #Delete the file\n  os.remove(file_path)\n  print(\"File deleted successfully\")\nelse:\n  print(\"File doesn't exist - first run - it's all good\")\n\nFile deleted successfully\n\n\nNext we go get the openai key, if we don’t already have one and set up the environment so that we are able to access the openai indexing capability using llama indexing provided by Meta open source.\n\nfrom dotenv import load_dotenv\nimport os\n\n#load_dotenv('config/.env')  # relative to current working directory\n\n# Or, using pathlib for robust path handling\nfrom pathlib import Path\nload_dotenv(Path('secrets') / '.env')\n\nTrue\n\n\napi_key = os.getenv(\"OPENAI_API_KEY\")\n\nHere we import the indexing packages to store the indexing in DuckDB.\n\n\nfrom llama_index.core import VectorStoreIndex, SimpleDirectoryReader\nfrom llama_index.vector_stores.duckdb import DuckDBVectorStore\nfrom llama_index.core import StorageContext\n\nvector_store = DuckDBVectorStore(\"my_vector_store.duckdb\", persist_dir=\"./persist/\")\ndocuments = SimpleDirectoryReader(\"/Users/Eileen/Desktop/GoData/Blog/posts/LLM_Demo/PDFs/\").load_data()\n\nThis is where storage_context points to your indexed PDFs in the storage you specified above\n\nstorage_context = StorageContext.from_defaults(vector_store=vector_store)\nindex = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n\nThis is a basic interface so that you can query anything about the PDFs you stored.\n\n# Create a custom theme with blue as the primary color\ntheme = gr.themes.Default()  \n\n\ndef greet(query):\n    \n    query_engine = index.as_query_engine()\n    response = query_engine.query(query)\n    strresponse = str(response)\n    #return(gradio.Markdown(strresponse))\n    #return(textwrap.fill(str(response), 80))\n    return(f\"{response}\")\n    #display(Markdown(f\"&lt;b&gt;{response}&lt;/b&gt;\")\n    #return \"Hello \" + query + \"!\"\n\n#demo = gr.Interface(fn=greet, inputs=\"text\", outputs=\"text\")\n#demo.launch(share=True)   \n\n\n\nDeployment\nOn Hugging Face:\nThis is what it looks like"
  },
  {
    "objectID": "posts/Shinylive/index.html",
    "href": "posts/Shinylive/index.html",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "",
    "text": "Shiny Apps - can be converted to Shinylive using Quarto in just a few lines of code. If the Shiny app isn’t too complex, we can provide a serverless interactive experience using just an html website. The Shiny App that we converted is one of Posit’s simple Shiny Apps in its gallery(Posit 2014). ShinyLive allows a more frictionless way to share your app without having to use a hosted server by running on its own html page served to the client. The html is rendered in quarto to automatically download the needed assets to the client and it can run from their own pc or mac.\nThe Shiny App that we chose is the KMeans model using the Iris dataset, provides a way to convert a Shiny App, but it’s also a handy tool to deploy on our website. There were just 2 things we had to change and that was using the {shinylive-r} instead of {r} and to change ui to using fluidPage from the bslib library to ensure app resizes well to different devices. You’ll notice that older shiny apps don’t resize well, and this is why."
  },
  {
    "objectID": "posts/Shinylive/index.html#introduction",
    "href": "posts/Shinylive/index.html#introduction",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "",
    "text": "Shiny Apps - can be converted to Shinylive using Quarto in just a few lines of code. If the Shiny app isn’t too complex, we can provide a serverless interactive experience using just an html website. The Shiny App that we converted is one of Posit’s simple Shiny Apps in its gallery(Posit 2014). ShinyLive allows a more frictionless way to share your app without having to use a hosted server by running on its own html page served to the client. The html is rendered in quarto to automatically download the needed assets to the client and it can run from their own pc or mac.\nThe Shiny App that we chose is the KMeans model using the Iris dataset, provides a way to convert a Shiny App, but it’s also a handy tool to deploy on our website. There were just 2 things we had to change and that was using the {shinylive-r} instead of {r} and to change ui to using fluidPage from the bslib library to ensure app resizes well to different devices. You’ll notice that older shiny apps don’t resize well, and this is why."
  },
  {
    "objectID": "posts/Shinylive/index.html#kmeans",
    "href": "posts/Shinylive/index.html#kmeans",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "KMeans",
    "text": "KMeans\nKMeans is an unsupervised machine learning algorithm used to group similar data together without already predefined classifications. All the points are clustered around a centroid that represents the mean of all points within the cluster. The number of centroids are referred to as “K values” and represents the number groups within all the data ponts. The goal is to minimize the euclidean distance between the data point and the its centroid mean, maximize the separation between clusters, and minimize total squared distance between each point and it’s assigned centriod.\nIn order to find the optimal K values, you need to run through and iterative process. This KMeans model uses Shinylive to be able to iterate quickly between K values to visually see the best grouping or at least to narrow down the K values to calculate the optimal number of categories.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nlibrary(bslib)\n\nvars &lt;- setdiff(names(iris), \"Species\")\n\nui &lt;- fluidPage(\n  titlePanel('Iris k-means clustering'),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput('xcol', 'X Variable', vars),\n      selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),\n      numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n    ),\n    mainPanel(\n      plotOutput('plot1')\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  selectedData &lt;- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n  clusters &lt;- reactive({\n    kmeans(selectedData(), input$clusters)\n  })\n  output$plot1 &lt;- renderPlot({\n    palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n              \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(selectedData(),\n         col = clusters()$cluster,\n         pch = 20, cex = 3)\n    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/Shinylive/index.html#deployment",
    "href": "posts/Shinylive/index.html#deployment",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "Deployment",
    "text": "Deployment\nWe can take a shiny app and convert it to shiny live that enables the application to run on just the client’s browser from an html page.\n\nInstall required packages\n\n#install.packages(\"shiny\")\n#install.packages(\"shinylive\")\n\n\n\nUpdate Quarto Extension\n\n#quarto add quarto-ext/shinylive\n\n\n\nVerify you can retrieve the shinylive assets\n\n#shinylive::assets_info()\n\n\n\nYAML (Remove comments and add to your Yaml) :\n\n#---\n#format: \n  #html:\n    #embed-resources: false\n#filters:\n  #- shinylive\n#---\n\n\n\nSource Code:\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nlibrary(bslib)\n\nvars &lt;- setdiff(names(iris), \"Species\")\n\nui &lt;- fluidPage(\n  titlePanel('Iris k-means clustering'),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput('xcol', 'X Variable', vars),\n      selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),\n      numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n    ),\n    mainPanel(\n      plotOutput('plot1')\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  selectedData &lt;- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n  clusters &lt;- reactive({\n    kmeans(selectedData(), input$clusters)\n  })\n  output$plot1 &lt;- renderPlot({\n    palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n              \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(selectedData(),\n         col = clusters()$cluster,\n         pch = 20, cex = 3)\n    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```"
  },
  {
    "objectID": "posts/RSS_Reader/index.html",
    "href": "posts/RSS_Reader/index.html",
    "title": "RSS Feeds",
    "section": "",
    "text": "RSS Readers may not be in fashion but I believe they are on the comeback. Inspired by an article from InfoWorld(Machlis 2022), with some slight modifications, I created an rss feed to list many the research publications. The list of research papers can look overwhelming, but can be refined or filtered using the search boxes.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(DT)\nlibrary(purrr)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(tidyRSS)\n\n\nmy_feed_data &lt;- tidyfeed(\"https://rss.arxiv.org/rss/cs.LG\") |&gt;\n  select(feed_pub_date,item_title, item_link, item_description)\n\nGET request successful. Parsing...\n\n\n\nmy_feed_data_summary &lt;- my_feed_data |&gt;\n  select(item_title, feed_pub_date, item_link,\n         item_description) \n\n\n#changed item_title to item_desc\nmy_rss_feed &lt;- my_feed_data_summary |&gt; mutate(\n    item_title = str_glue(\"&lt;a target='_blank' title='{item_title}' href='{item_link}' rel='noopener'&gt;{item_title}&lt;/a&gt;\")\n)\n\n\nmy_rss_feed_table &lt;- my_rss_feed |&gt; select(-item_link)\n#my_feed_data_summary\n\n\n\nDT::datatable(my_rss_feed_table, filter = 'top', escape = FALSE, rownames = FALSE,\n  options = list(\n  search = list(regex = TRUE, caseInsensitive = TRUE),  \n  pageLength = 10,\n  lengthMenu = c(10, 25, 50, 100, 200),\n  autowidth = TRUE,\n  columnDefs = list(list(width = '80%', targets = list(2)))\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nMachlis, Sharon. 2022. “How to Create Your Own RSS Reader with r _ InfoWorld.” InfoWorld, December. https://www.infoworld.com/article/2337738/how-to-create-your-own-rss-reader-with-r.html."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GoData.ca",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nConverting Shiny Apps to ShinyLive\n\n\n\n\n\n\nR\n\n\nShinylive\n\n\nKMeans\n\n\n\n\n\n\n\n\n\nJul 13, 2025\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\nRSS Feeds\n\n\n\n\n\n\nR\n\n\nJavascript\n\n\ntidyRSS\n\n\n\n\n\n\n\n\n\nJun 30, 2025\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nEasily Build Customized LLMs\n\n\n\n\n\n\nLLMs\n\n\nPython\n\n\nOpenAI\n\n\nHugging Face\n\n\n\n\n\n\n\n\n\nJun 3, 2025\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "shinylive.html",
    "href": "shinylive.html",
    "title": "Shinylive",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\nlibrary(shiny)\n\nvars &lt;- setdiff(names(iris), \"Species\")\n\nui &lt;- fluidPage(\n  titlePanel('Iris k-means clustering'),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput('xcol', 'X Variable', vars),\n      selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),\n      numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n    ),\n    mainPanel(\n      plotOutput('plot1')\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  selectedData &lt;- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n  clusters &lt;- reactive({\n    kmeans(selectedData(), input$clusters)\n  })\n  output$plot1 &lt;- renderPlot({\n    palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n              \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(selectedData(),\n         col = clusters()$cluster,\n         pch = 20, cex = 3)\n    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n}"
  },
  {
    "objectID": "posts/Shinylive/index.knit.html",
    "href": "posts/Shinylive/index.knit.html",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "",
    "text": "Shiny Apps - can be converted to Shinylive using Quarto in just a few lines of code. If the Shiny app isn’t too complex, we can provide a serverless interactive experience using just an html website. The Shiny App that we converted is one of Posit’s simple Shiny Apps in its gallery(Posit 2014). ShinyLive allows a more frictionless way to share your app without having to use a hosted server by running on its own html page served to the client. The html is rendered in quarto to automatically download the needed assets to the client and it can run from their own pc or mac.\nThe Shiny App that we chose is the KMeans model using the Iris dataset, provides a way to convert a Shiny App, but it’s also a handy tool to deploy on our website. There were just 2 things we had to change and that was using the {shinylive-r} instead of {r} and to change ui to using fluidPage from the bslib library to ensure app resizes well to different devices. You’ll notice that older shiny apps don’t resize well, and this is why."
  },
  {
    "objectID": "posts/Shinylive/index.knit.html#introduction",
    "href": "posts/Shinylive/index.knit.html#introduction",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "",
    "text": "Shiny Apps - can be converted to Shinylive using Quarto in just a few lines of code. If the Shiny app isn’t too complex, we can provide a serverless interactive experience using just an html website. The Shiny App that we converted is one of Posit’s simple Shiny Apps in its gallery(Posit 2014). ShinyLive allows a more frictionless way to share your app without having to use a hosted server by running on its own html page served to the client. The html is rendered in quarto to automatically download the needed assets to the client and it can run from their own pc or mac.\nThe Shiny App that we chose is the KMeans model using the Iris dataset, provides a way to convert a Shiny App, but it’s also a handy tool to deploy on our website. There were just 2 things we had to change and that was using the {shinylive-r} instead of {r} and to change ui to using fluidPage from the bslib library to ensure app resizes well to different devices. You’ll notice that older shiny apps don’t resize well, and this is why."
  },
  {
    "objectID": "posts/Shinylive/index.knit.html#kmeans",
    "href": "posts/Shinylive/index.knit.html#kmeans",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "KMeans",
    "text": "KMeans\nKMeans is an unsupervised machine learning algorithm used to group similar data together without already predefined classifications. All the points are clustered around a centroid that represents the mean of all points within the cluster. The number of centroids are referred to as “K values” and represents the number groups within all the data ponts. The goal is to minimize the euclidean distance between the data point and the its centroid mean, maximize the separation between clusters, and minimize total squared distance between each point and it’s assigned centriod.\nIn order to find the optimal K values, you need to run through and iterative process. This KMeans model uses Shinylive to be able to iterate quickly between K values to visually see the best grouping or at least to narrow down the K values to calculate the optimal number of categories.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nlibrary(bslib)\n\nvars &lt;- setdiff(names(iris), \"Species\")\n\nui &lt;- fluidPage(\n  titlePanel('Iris k-means clustering'),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput('xcol', 'X Variable', vars),\n      selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),\n      numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n    ),\n    mainPanel(\n      plotOutput('plot1')\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  selectedData &lt;- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n  clusters &lt;- reactive({\n    kmeans(selectedData(), input$clusters)\n  })\n  output$plot1 &lt;- renderPlot({\n    palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n              \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(selectedData(),\n         col = clusters()$cluster,\n         pch = 20, cex = 3)\n    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/Shinylive/index.knit.html#deployment",
    "href": "posts/Shinylive/index.knit.html#deployment",
    "title": "Converting Shiny Apps to ShinyLive",
    "section": "Deployment",
    "text": "Deployment\nWe can take a shiny app and convert it to shiny live that enables the application to run on just the client’s browser from an html page.\n\nInstall required packages\n\n#install.packages(\"shiny\")\n#install.packages(\"shinylive\")\n\n\n\nUpdate Quarto Extension\n\n#quarto add quarto-ext/shinylive\n\n\n\nVerify you can retrieve the shinylive assets\n\n#shinylive::assets_info()\n\n\n\nYAML (Remove comments and add to your Yaml) :\n\n#---\n#format: \n  #html:\n    #embed-resources: false\n#filters:\n  #- shinylive\n#---\n\n\n\nSource Code:\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nlibrary(bslib)\n\nvars &lt;- setdiff(names(iris), \"Species\")\n\nui &lt;- fluidPage(\n  titlePanel('Iris k-means clustering'),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput('xcol', 'X Variable', vars),\n      selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),\n      numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n    ),\n    mainPanel(\n      plotOutput('plot1')\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  selectedData &lt;- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n  clusters &lt;- reactive({\n    kmeans(selectedData(), input$clusters)\n  })\n  output$plot1 &lt;- renderPlot({\n    palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n              \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(selectedData(),\n         col = clusters()$cluster,\n         pch = 20, cex = 3)\n    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```"
  }
]