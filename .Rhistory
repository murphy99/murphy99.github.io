my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
feed_data <- tidyfeed(my_feed_data)
if (nrow(feed_data) > 0) {
select(feed_pub_date,item_title, item_link, item_description)
} else {
cat("No papers published today\n")
}
library(tidyverse)
library(dplyr)
library(DT)
library(purrr)
library(stringr)
library(lubridate)
library(tidyRSS)
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
feed_data <- tidyfeed(my_feed_data)
if (nrow(feed_data) > 0) {
select(feed_pub_date,item_title, item_link, item_description)
} else {
cat("No papers published today\n")
}
library(tidyverse)
library(dplyr)
library(DT)
library(purrr)
library(stringr)
library(lubridate)
library(tidyRSS)
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
feed_data <- tidyfeed(my_feed_data)
if (nrow(feed_data) > 0) {
select(feed_pub_date,item_title, item_link, item_description)
} else {
cat("No papers published today\n")
}
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
feed_data <- tidyfeed(my_feed_data)
if (nrow(feed_data) > 0) {
select(feed_pub_date,item_title, item_link, item_description)
} else {
cat("No papers published today\n")
}
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
feed_data <- tidyfeed(my_feed_data)
feed_data
if (nrow(feed_data) > 0) {
select(feed_pub_date,item_title, item_link, item_description)
} else {
cat("No papers published today\n")
}
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
feed_data <- tidyfeed(my_feed_data)
print(nrow(feed_data))
if (nrow(feed_data) > 0) {
select(feed_pub_date,item_title, item_link, item_description)
} else {
cat("No papers published today\n")
}
TryCatch(
{
# code that might fail
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
print(feed_data)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
}
)
TryCatch()
feed_data <- tidyfeed(my_feed_data)
print(nrow(feed_data))
feed_data |>
select(feed_pub_date,item_title, item_link, item_description)
library(tidyRSS)
library(dplyr)
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
feed_data <- tidyfeed(my_feed_data)
cat("Number of items:", nrow(feed_data), "\n")
feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
cat("No papers published today\n")
} else {
print(result)
}
library(tidyverse)
library(dplyr)
library(DT)
library(purrr)
library(stringr)
library(lubridate)
library(tidyRSS)
library(tidyverse)
library(dplyr)
library(DT)
library(purrr)
library(stringr)
library(lubridate)
library(tidyRSS)
my_feed_data <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
feed_data <- tidyfeed(my_feed_data)
cat("Number of items:", nrow(feed_data), "\n")
feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
cat("No papers published today\n")
} else {
print(result)
}
my_feed_data_summary <- feed_data |>
select(item_title, feed_pub_date, item_link,
item_description)
library(tidyverse)
library(dplyr)
library(DT)
library(purrr)
library(stringr)
library(lubridate)
library(tidyRSS)
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
cat("No papers published today\n")
} else {
print(result)
}
my_feed_data_summary <- my_feed_data |>
select(item_title, feed_pub_date, item_link,
item_description)
library(tidyverse)
library(dplyr)
library(DT)
library(purrr)
library(stringr)
library(lubridate)
library(tidyRSS)
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
cat("No papers published today\n")
} else {
print(result)
}
if (is.null(result) || nrow(result) == 0) {
stop("No papers published today - stopping execution.")
} else {
print(result)
}
library(tidyverse)
library(dplyr)
library(DT)
library(purrr)
library(stringr)
library(lubridate)
library(tidyRSS)
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
cat("No papers published today\n")
} else {
print(result)
}
my_feed_data_summary <- my_feed_data |>
select(item_title, feed_pub_date, item_link,
item_description)
flag=0
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
flag=1
cat("No papers published today\n")
} else {
print(result)
}
if  ! flag {
my_feed_data_summary <- my_feed_data |>
select(item_title, feed_pub_date, item_link,
item_description) }
if (! flag) {
my_feed_data_summary <- my_feed_data |>
select(item_title, feed_pub_date, item_link,item_description) }
if (! flage) {}
#changed item_title to item_desc
my_rss_feed <- my_feed_data_summary |> mutate(
item_title = str_glue("<a target='_blank' title='{item_title}' href='{item_link}' rel='noopener'>{item_title}</a>")
)}
if (! flag) {}
#changed item_title to item_desc
my_rss_feed <- my_feed_data_summary |> mutate(
item_title = str_glue("<a target='_blank' title='{item_title}' href='{item_link}' rel='noopener'>{item_title}</a>")
)}
if (! flag) {
#changed item_title to item_desc
my_rss_feed <- my_feed_data_summary |> mutate(
item_title = str_glue("<a target='_blank' title='{item_title}' href='{item_link}' rel='noopener'>{item_title}</a>")
)}
if (! flag) {
DT::datatable(my_rss_feed_table, filter = 'top', escape = FALSE, rownames = FALSE,
options = list(
search = list(regex = TRUE, caseInsensitive = TRUE),
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 200),
autowidth = TRUE,
columnDefs = list(list(width = '80%', targets = list(2)))
)
)}
flag=0
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
flag=1
cat("No papers published today\n")
} else {
print(result)
}
if (!flag) {
DT::datatable(suppressMessages(most_recent("https://rss.arxiv.org/rss/cs.LG")), filter = 'top', escape = FALSE, rownames = FALSE,
options = list(
search = list(regex = TRUE, caseInsensitive = TRUE),
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 200),
autowidth = TRUE,
columnDefs = list(list(width = '80%', targets = list(2)))
)
)}
flag=0
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
flag=1
cat("No papers published today\n")
} else {
print(result)
}
# Define a function named 'add_numbers' that takes two arguments
most_recent <- function(source) {
site=source
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(dplyr))
library(DT)
library(lubridate)
library(tidyRSS)
my_feed_data <- tidyfeed(site) |>
select(feed_pub_date,item_title, item_link, item_description)
my_feed_data_summary <- my_feed_data |>
select(item_title, feed_pub_date, item_link,
item_description)
#changed item_title to item_desc
my_rss_feed <- my_feed_data_summary |> mutate(
item_title = str_glue("<a target='_blank' title='{item_title}' href='{item_link}' rel='noopener'>{item_title}</a>")
)
my_rss_feed_table <- my_rss_feed |> select(-item_link)
#my_feed_data_summary
return(my_rss_feed_table)  # Explicit return is optional, but good practice
}
if (!flag) {
DT::datatable(suppressMessages(most_recent("https://rss.arxiv.org/rss/cs.LG")), filter = 'top', escape = FALSE, rownames = FALSE,
options = list(
search = list(regex = TRUE, caseInsensitive = TRUE),
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 200),
autowidth = TRUE,
columnDefs = list(list(width = '80%', targets = list(2)))
)
)}
flag=0
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
flag=1
cat("No papers published today\n")
} else {
print(result)
}
# Define a function named 'add_numbers' that takes two arguments
most_recent <- function(source) {
site=source
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(dplyr))
library(DT)
library(lubridate)
library(tidyRSS)
library(purrr)
library(stringr)
my_feed_data <- tidyfeed(site) |>
select(feed_pub_date,item_title, item_link, item_description)
my_feed_data_summary <- my_feed_data |>
select(item_title, feed_pub_date, item_link,
item_description)
#changed item_title to item_desc
my_rss_feed <- my_feed_data_summary |> mutate(
item_title = str_glue("<a target='_blank' title='{item_title}' href='{item_link}' rel='noopener'>{item_title}</a>")
)
my_rss_feed_table <- my_rss_feed |> select(-item_link)
#my_feed_data_summary
return(my_rss_feed_table)  # Explicit return is optional, but good practice
}
if (!flag) {
DT::datatable(suppressMessages(most_recent("https://rss.arxiv.org/rss/cs.LG")), filter = 'top', escape = FALSE, rownames = FALSE,
options = list(
search = list(regex = TRUE, caseInsensitive = TRUE),
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 200),
autowidth = TRUE,
columnDefs = list(list(width = '80%', targets = list(2)))
)
)}
flag=0
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
flag=1
cat("Sorry, No papers published today\n")
}
#else {
#print(result)
#}
flag=0
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
#cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
flag=1
cat("Sorry, No papers published today\n")
}
else {
print(result)
}
flag=0
my_feed <- "https://rss.arxiv.org/rss/cs.LG"
result <- tryCatch(
{
my_feed_data <- tidyfeed(my_feed)
cat("Number of items:", nrow(my_feed_data), "\n")
my_feed_data |>
select(feed_pub_date, item_title, item_link, item_description)
},
error = function(e) {
#cat("Error caught:", e$message, "\n")
NULL  # return NULL on error
}
)
if (is.null(result) || nrow(result) == 0) {
flag=1
cat("Sorry, No papers published today\n")
} else {
print(result)
}
# Define a function named 'add_numbers' that takes two arguments
most_recent <- function(source) {
site=source
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(dplyr))
library(DT)
library(lubridate)
library(tidyRSS)
library(purrr)
library(stringr)
my_feed_data <- tidyfeed(site) |>
select(feed_pub_date,item_title, item_link, item_description)
my_feed_data_summary <- my_feed_data |>
select(item_title, feed_pub_date, item_link,
item_description)
#changed item_title to item_desc
my_rss_feed <- my_feed_data_summary |> mutate(
item_title = str_glue("<a target='_blank' title='{item_title}' href='{item_link}' rel='noopener'>{item_title}</a>")
)
my_rss_feed_table <- my_rss_feed |> select(-item_link)
#my_feed_data_summary
return(my_rss_feed_table)  # Explicit return is optional, but good practice
}
if (!flag) {
DT::datatable(suppressMessages(most_recent("https://rss.arxiv.org/rss/cs.LG")), filter = 'top', escape = FALSE, rownames = FALSE,
options = list(
search = list(regex = TRUE, caseInsensitive = TRUE),
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 200),
autowidth = TRUE,
columnDefs = list(list(width = '80%', targets = list(2)))
)
)}
renv::status()
?renv::status
renv::install()
renv::install("shinylive")
renv::status()
renv::status()
renv::restore()
renv::status()
renv::install(shinylive)
renv::install("shinylive")
install.packages("shinylive")
renv::status()
renv::install("shinylive")
renv::status()
reticulate::repl_python()
renv::status()
renv::snapshot()
